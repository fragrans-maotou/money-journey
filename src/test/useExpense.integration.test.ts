import { describe, it, expect, beforeEach, afterEach, vi } from 'vitest'
import { nextTick } from 'vue'
import { useExpense } from '@/composables/useExpense'
import { useBudget } from '@/composables/useBudget'
import type { ExpenseInput, CategoryInput, BudgetInput } from '@/types'

// Mock localStorage for testing
const localStorageMock = (() => {
  let store: Record<string, string> = {}
  return {
    getItem: (key: string) => store[key] || null,
    setItem: (key: string, value: string) => { store[key] = value },
    removeItem: (key: string) => { delete store[key] },
    clear: () => { store = {} }
  }
})()

Object.defineProperty(window, 'localStorage', {
  value: localStorageMock
})

describe('useExpense Integration Tests', () => {
  let expenseComposable: ReturnType<typeof useExpense>
  let budgetComposable: ReturnType<typeof useBudget>

  beforeEach(() => {
    // Clear localStorage before each test
    localStorage.clear()
    
    // Initialize composables
    expenseComposable = useExpense()
    budgetComposable = useBudget()
  })

  afterEach(() => {
    localStorage.clear()
  })

  describe('‰∏éÈ¢ÑÁÆóÁ≥ªÁªüÈõÜÊàê', () => {
    it('Â∫îËØ•Âú®Ê∑ªÂä†Ê∂àË¥πËÆ∞ÂΩïÂêéÊõ¥Êñ∞È¢ÑÁÆóÂàÜÈÖç', async () => {
      // 1. ËÆæÁΩÆÊúàÂ∫¶È¢ÑÁÆó
      const budgetInput: BudgetInput = {
        monthlyAmount: 3000,
        startDate: new Date(2024, 0, 1) // January 1, 2024
      }
      
      await budgetComposable.setMonthlyBudget(budgetInput)
      await nextTick()

      // 2. Ëé∑ÂèñÂàùÂßãÂèØÁî®È¢ÑÁÆó
      const initialAvailableBudget = budgetComposable.availableBudget.value
      expect(initialAvailableBudget).toBeGreaterThan(0)

      // 3. Ê∑ªÂä†Ê∂àË¥πËÆ∞ÂΩï
      const expenseInput: ExpenseInput = {
        amount: 50,
        categoryId: expenseComposable.categories.value[0]?.id || 'default-cat',
        description: 'ÂçàÈ§ê',
        date: new Date(2024, 0, 15) // January 15, 2024
      }

      await expenseComposable.addExpense(expenseInput)
      await nextTick()

      // 4. È™åËØÅÈ¢ÑÁÆóÂ∑≤Êõ¥Êñ∞
      const updatedAvailableBudget = budgetComposable.availableBudget.value
      const totalSpent = budgetComposable.totalSpent.value
      
      expect(totalSpent).toBe(50)
      expect(updatedAvailableBudget).toBeLessThan(initialAvailableBudget)
    })

    it('Â∫îËØ•Âú®Âà†Èô§Ê∂àË¥πËÆ∞ÂΩïÂêéÊÅ¢Â§çÈ¢ÑÁÆó', async () => {
      // 1. ËÆæÁΩÆÈ¢ÑÁÆó
      await budgetComposable.setMonthlyBudget({
        monthlyAmount: 3000,
        startDate: new Date(2024, 0, 1)
      })

      // 2. Ê∑ªÂä†Ê∂àË¥πËÆ∞ÂΩï
      const expense = await expenseComposable.addExpense({
        amount: 100,
        categoryId: expenseComposable.categories.value[0]?.id || 'default-cat',
        description: 'Ë¥≠Áâ©',
        date: new Date(2024, 0, 15)
      })
      await nextTick()

      const spentAfterAdd = budgetComposable.totalSpent.value
      expect(spentAfterAdd).toBe(100)

      // 3. Âà†Èô§Ê∂àË¥πËÆ∞ÂΩï
      await expenseComposable.deleteExpense(expense.id)
      await nextTick()

      const spentAfterDelete = budgetComposable.totalSpent.value
      expect(spentAfterDelete).toBe(0)
    })

    it('Â∫îËØ•Âú®Êõ¥Êñ∞Ê∂àË¥πËÆ∞ÂΩïÂêéÊ≠£Á°ÆË∞ÉÊï¥È¢ÑÁÆó', async () => {
      // 1. ËÆæÁΩÆÈ¢ÑÁÆó
      await budgetComposable.setMonthlyBudget({
        monthlyAmount: 3000,
        startDate: new Date(2024, 0, 1)
      })

      // 2. Ê∑ªÂä†Ê∂àË¥πËÆ∞ÂΩï
      const expense = await expenseComposable.addExpense({
        amount: 50,
        categoryId: expenseComposable.categories.value[0]?.id || 'default-cat',
        description: 'ÂçàÈ§ê',
        date: new Date(2024, 0, 15)
      })
      await nextTick()

      expect(budgetComposable.totalSpent.value).toBe(50)

      // 3. Êõ¥Êñ∞Ê∂àË¥πÈáëÈ¢ù
      await expenseComposable.updateExpense(expense.id, { amount: 80 })
      await nextTick()

      expect(budgetComposable.totalSpent.value).toBe(80)
    })
  })

  describe('Êï∞ÊçÆÊåÅ‰πÖÂåñÈõÜÊàê', () => {
    it('Â∫îËØ•ÊåÅ‰πÖÂåñÊ∂àË¥πËÆ∞ÂΩïÂà∞ localStorage', async () => {
      // Ê∑ªÂä†Ê∂àË¥πËÆ∞ÂΩï
      await expenseComposable.addExpense({
        amount: 25.5,
        categoryId: expenseComposable.categories.value[0]?.id || 'default-cat',
        description: 'ÂíñÂï°',
        date: new Date()
      })

      // È™åËØÅÊï∞ÊçÆÂ∑≤‰øùÂ≠òÂà∞ localStorage
      const storedExpenses = localStorage.getItem('expenses')
      expect(storedExpenses).toBeTruthy()
      
      const parsedExpenses = JSON.parse(storedExpenses!)
      expect(parsedExpenses).toHaveLength(1)
      expect(parsedExpenses[0].amount).toBe(25.5)
      expect(parsedExpenses[0].description).toBe('ÂíñÂï°')
    })

    it('Â∫îËØ•ÊåÅ‰πÖÂåñÂàÜÁ±ªÊï∞ÊçÆÂà∞ localStorage', async () => {
      // Ê∑ªÂä†Ëá™ÂÆö‰πâÂàÜÁ±ª
      await expenseComposable.addCategory({
        name: 'ÂÅ•Ë∫´',
        icon: 'üí™',
        color: '#FF5733'
      })

      // È™åËØÅÊï∞ÊçÆÂ∑≤‰øùÂ≠òÂà∞ localStorage
      const storedCategories = localStorage.getItem('categories')
      expect(storedCategories).toBeTruthy()
      
      const parsedCategories = JSON.parse(storedCategories!)
      const customCategory = parsedCategories.find((cat: any) => cat.name === 'ÂÅ•Ë∫´')
      expect(customCategory).toBeTruthy()
      expect(customCategory.icon).toBe('üí™')
      expect(customCategory.color).toBe('#FF5733')
      expect(customCategory.isDefault).toBe(false)
    })

    it('Â∫îËØ•Âú®ÈáçÊñ∞ÂàùÂßãÂåñÊó∂ÊÅ¢Â§çÊï∞ÊçÆ', async () => {
      // 1. Ê∑ªÂä†‰∏Ä‰∫õÊï∞ÊçÆ
      await expenseComposable.addExpense({
        amount: 30,
        categoryId: expenseComposable.categories.value[0]?.id || 'default-cat',
        description: 'Êó©È§ê'
      })

      await expenseComposable.addCategory({
        name: 'Â≠¶‰π†',
        icon: 'üìö',
        color: '#3498DB'
      })

      // 2. ÂàõÂª∫Êñ∞ÁöÑ composable ÂÆû‰æãÔºàÊ®°ÊãüÂ∫îÁî®ÈáçÂêØÔºâ
      const newExpenseComposable = useExpense()
      await nextTick()

      // 3. È™åËØÅÊï∞ÊçÆÂ∑≤ÊÅ¢Â§ç
      expect(newExpenseComposable.expenses.value).toHaveLength(1)
      expect(newExpenseComposable.expenses.value[0].description).toBe('Êó©È§ê')
      
      const customCategory = newExpenseComposable.categories.value.find(cat => cat.name === 'Â≠¶‰π†')
      expect(customCategory).toBeTruthy()
      expect(customCategory?.icon).toBe('üìö')
    })
  })

  describe('ÈªòËÆ§ÂàÜÁ±ªÂàùÂßãÂåñ', () => {
    it('Â∫îËØ•Âú®È¶ñÊ¨°‰ΩøÁî®Êó∂ÂàùÂßãÂåñÈªòËÆ§ÂàÜÁ±ª', async () => {
      // Á≠âÂæÖÂàùÂßãÂåñÂÆåÊàê
      await nextTick()

      // È™åËØÅÈªòËÆ§ÂàÜÁ±ªÂ∑≤ÂàõÂª∫
      const categories = expenseComposable.categories.value
      expect(categories.length).toBeGreaterThan(0)

      // È™åËØÅÂåÖÂê´È¢ÑÊúüÁöÑÈªòËÆ§ÂàÜÁ±ª
      const expectedCategories = ['È§êÈ•Æ', '‰∫§ÈÄö', 'Ë¥≠Áâ©', 'Â®±‰πê', 'ÂåªÁñó', 'ÊïôËÇ≤', 'ÂÖ∂‰ªñ']
      expectedCategories.forEach(name => {
        const category = categories.find(cat => cat.name === name)
        expect(category).toBeTruthy()
        expect(category?.isDefault).toBe(true)
      })
    })

    it('Â∫îËØ•‰∏çÈáçÂ§çÂàõÂª∫ÈªòËÆ§ÂàÜÁ±ª', async () => {
      // Á¨¨‰∏ÄÊ¨°ÂàùÂßãÂåñ
      await nextTick()
      const firstCount = expenseComposable.categories.value.length

      // ÂàõÂª∫Êñ∞ÁöÑ composable ÂÆû‰æã
      const newComposable = useExpense()
      await nextTick()

      // È™åËØÅÂàÜÁ±ªÊï∞ÈáèÊ≤°ÊúâÂ¢ûÂä†
      expect(newComposable.categories.value.length).toBe(firstCount)
    })
  })

  describe('Â§çÊùÇÊü•ËØ¢ÂíåÁ≠õÈÄâÂú∫ÊôØ', () => {
    beforeEach(async () => {
      // ÂáÜÂ§áÊµãËØïÊï∞ÊçÆ
      const categories = expenseComposable.categories.value
      const foodCat = categories.find(cat => cat.name === 'È§êÈ•Æ')?.id || 'food'
      const transportCat = categories.find(cat => cat.name === '‰∫§ÈÄö')?.id || 'transport'

      // Ê∑ªÂä†Â§öÊù°Ê∂àË¥πËÆ∞ÂΩï
      const expenses = [
        { amount: 25, categoryId: foodCat, description: 'Êó©È§ê', date: new Date(2024, 0, 15) },
        { amount: 45, categoryId: foodCat, description: 'ÂçàÈ§ê', date: new Date(2024, 0, 15) },
        { amount: 80, categoryId: foodCat, description: 'ÊôöÈ§ê', date: new Date(2024, 0, 15) },
        { amount: 20, categoryId: transportCat, description: 'Âú∞ÈìÅ', date: new Date(2024, 0, 15) },
        { amount: 35, categoryId: transportCat, description: 'ÊâìËΩ¶', date: new Date(2024, 0, 16) },
        { amount: 60, categoryId: foodCat, description: 'ËÅöÈ§ê', date: new Date(2024, 0, 16) }
      ]

      for (const expense of expenses) {
        await expenseComposable.addExpense(expense)
      }
      await nextTick()
    })

    it('Â∫îËØ•Ê≠£Á°ÆÁªüËÆ°‰ªäÊó•Ê∂àË¥π', () => {
      const today = new Date()
      const todayStr = today.toISOString().split('T')[0]
      const jan15Str = new Date(2024, 0, 15).toISOString().split('T')[0]

      if (todayStr === jan15Str) {
        // Â¶ÇÊûú‰ªäÂ§©ÊòØÊµãËØïÊó•ÊúüÔºåÂ∫îËØ•Êúâ4Êù°ËÆ∞ÂΩï
        expect(expenseComposable.todayExpenses.value).toHaveLength(4)
        expect(expenseComposable.todayTotal.value).toBe(170) // 25+45+80+20
      } else {
        // Âê¶Âàô‰ªäÊó•Êó†Ê∂àË¥π
        expect(expenseComposable.todayExpenses.value).toHaveLength(0)
        expect(expenseComposable.todayTotal.value).toBe(0)
      }
    })

    it('Â∫îËØ•Ê≠£Á°ÆÊåâÂàÜÁ±ªÁªüËÆ°Ê∂àË¥π', () => {
      const categoryStats = expenseComposable.expensesByCategory.value
      
      const foodStats = categoryStats.find(stat => stat.categoryName === 'È§êÈ•Æ')
      const transportStats = categoryStats.find(stat => stat.categoryName === '‰∫§ÈÄö')

      expect(foodStats?.amount).toBe(210) // 25+45+80+60
      expect(foodStats?.count).toBe(4)
      
      expect(transportStats?.amount).toBe(55) // 20+35
      expect(transportStats?.count).toBe(2)
    })

    it('Â∫îËØ•Ê≠£Á°ÆÂ∫îÁî®Â§çÂêàÁ≠õÈÄâÊù°‰ª∂', () => {
      // Á≠õÈÄâÈ§êÈ•ÆÂàÜÁ±ª‰∏îÈáëÈ¢ùÂ§ß‰∫é30ÁöÑËÆ∞ÂΩï
      const foodCat = expenseComposable.categories.value.find(cat => cat.name === 'È§êÈ•Æ')
      const filter = {
        categoryId: foodCat?.id,
        minAmount: 30
      }

      const filtered = expenseComposable.applyFilter(filter)
      expect(filtered).toHaveLength(3) // ÂçàÈ§ê45, ÊôöÈ§ê80, ËÅöÈ§ê60
      expect(filtered.every(exp => exp.amount >= 30)).toBe(true)
      expect(filtered.every(exp => exp.categoryId === foodCat?.id)).toBe(true)
    })

    it('Â∫îËØ•Ê≠£Á°ÆÁîüÊàêÁªüËÆ°Êä•Âëä', () => {
      const startDate = new Date(2024, 0, 15)
      const endDate = new Date(2024, 0, 16)
      
      const stats = expenseComposable.getExpenseStatistics(startDate, endDate)
      
      expect(stats.totalAmount).toBe(265) // ÊâÄÊúâÊ∂àË¥πÊÄªÂíå
      expect(stats.totalCount).toBe(6)
      expect(stats.averageAmount).toBeCloseTo(44.17, 2)
      
      // È™åËØÅÂàÜÁ±ªÁªüËÆ°
      expect(stats.categoryStats).toHaveLength(2)
      const foodStats = stats.categoryStats.find(stat => stat.categoryName === 'È§êÈ•Æ')
      expect(foodStats?.percentage).toBeCloseTo(79.25, 2) // 210/265 * 100
      
      // È™åËØÅÊó•ÁªüËÆ°
      expect(stats.dailyStats).toHaveLength(2)
      const jan15Stats = stats.dailyStats.find(stat => 
        stat.date.toISOString().split('T')[0] === '2024-01-15'
      )
      expect(jan15Stats?.amount).toBe(170) // 15Âè∑ÁöÑÊ∂àË¥πÊÄªÂíå
    })
  })

  describe('ÈîôËØØÂ§ÑÁêÜÂíåËæπÁïåÊÉÖÂÜµ', () => {
    it('Â∫îËØ•Â§ÑÁêÜÊó†ÊïàÁöÑÊ∂àË¥πËÆ∞ÂΩïËæìÂÖ•', async () => {
      const invalidExpense = {
        amount: -10, // Ë¥üÊï∞ÈáëÈ¢ù
        categoryId: 'non-existent-category',
        description: ''
      }

      await expect(expenseComposable.addExpense(invalidExpense as ExpenseInput))
        .rejects.toThrow()
    })

    it('Â∫îËØ•Â§ÑÁêÜÊó†ÊïàÁöÑÂàÜÁ±ªËæìÂÖ•', async () => {
      const invalidCategory = {
        name: '', // Á©∫ÂêçÁß∞
        icon: '',
        color: 'invalid-color' // Êó†ÊïàÈ¢úËâ≤Ê†ºÂºè
      }

      await expect(expenseComposable.addCategory(invalidCategory as CategoryInput))
        .rejects.toThrow()
    })

    it('Â∫îËØ•Â§ÑÁêÜÂ≠òÂÇ®ÈîôËØØ', async () => {
      // Mock localStorage to throw an error
      const originalSetItem = localStorage.setItem
      localStorage.setItem = vi.fn().mockImplementation(() => {
        throw new Error('Storage quota exceeded')
      })

      try {
        await expect(expenseComposable.addExpense({
          amount: 50,
          categoryId: expenseComposable.categories.value[0]?.id || 'default',
          description: 'ÊµãËØï'
        })).rejects.toThrow()
      } finally {
        // Restore original method
        localStorage.setItem = originalSetItem
      }
    })

    it('Â∫îËØ•Â§ÑÁêÜÁ©∫Êï∞ÊçÆÁöÑÁªüËÆ°ËÆ°ÁÆó', () => {
      // Ê∏ÖÁ©∫ÊâÄÊúâÊï∞ÊçÆ
      expenseComposable.expenses.value.length = 0

      const stats = expenseComposable.getExpenseStatistics(
        new Date(2024, 0, 1),
        new Date(2024, 0, 31)
      )

      expect(stats.totalAmount).toBe(0)
      expect(stats.totalCount).toBe(0)
      expect(stats.averageAmount).toBe(0)
      expect(stats.categoryStats).toHaveLength(0)
      expect(stats.dailyStats).toHaveLength(0)
    })
  })

  describe('ÊÄßËÉΩÂíåÂÜÖÂ≠òÁÆ°ÁêÜ', () => {
    it('Â∫îËØ•È´òÊïàÂ§ÑÁêÜÂ§ßÈáèÊï∞ÊçÆ', async () => {
      const startTime = Date.now()
      
      // Ê∑ªÂä†Â§ßÈáèÊ∂àË¥πËÆ∞ÂΩï
      const promises = []
      for (let i = 0; i < 100; i++) {
        promises.push(expenseComposable.addExpense({
          amount: Math.random() * 100,
          categoryId: expenseComposable.categories.value[0]?.id || 'default',
          description: `ÊµãËØïÊ∂àË¥π ${i}`,
          date: new Date(2024, 0, Math.floor(Math.random() * 30) + 1)
        }))
      }
      
      await Promise.all(promises)
      
      const endTime = Date.now()
      const duration = endTime - startTime
      
      // È™åËØÅÊÄßËÉΩÔºàÂ∫îËØ•Âú®ÂêàÁêÜÊó∂Èó¥ÂÜÖÂÆåÊàêÔºâ
      expect(duration).toBeLessThan(5000) // 5ÁßíÂÜÖÂÆåÊàê
      expect(expenseComposable.expenses.value).toHaveLength(100)
    })

    it('Â∫îËØ•Ê≠£Á°ÆÂ§ÑÁêÜÂπ∂ÂèëÊìç‰Ωú', async () => {
      // ÂêåÊó∂Ê∑ªÂä†Â§ö‰∏™Ê∂àË¥πËÆ∞ÂΩï
      const promises = [
        expenseComposable.addExpense({
          amount: 30,
          categoryId: expenseComposable.categories.value[0]?.id || 'default',
          description: 'Âπ∂ÂèëÊµãËØï1'
        }),
        expenseComposable.addExpense({
          amount: 40,
          categoryId: expenseComposable.categories.value[0]?.id || 'default',
          description: 'Âπ∂ÂèëÊµãËØï2'
        }),
        expenseComposable.addExpense({
          amount: 50,
          categoryId: expenseComposable.categories.value[0]?.id || 'default',
          description: 'Âπ∂ÂèëÊµãËØï3'
        })
      ]

      const results = await Promise.all(promises)
      
      expect(results).toHaveLength(3)
      expect(expenseComposable.expenses.value).toHaveLength(3)
      expect(expenseComposable.thisMonthTotal.value).toBe(120)
    })
  })
})