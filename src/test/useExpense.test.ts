import { describe, it, expect, beforeEach, vi } from 'vitest'
import { nextTick } from 'vue'
import { useExpense } from '@/composables/useExpense'
import type { ExpenseInput, CategoryInput, ExpenseFilter } from '@/types'

// Mock the storage composables
const mockExpenseStorage = {
  state: { value: [] as any[] },
  setValue: vi.fn().mockResolvedValue(undefined)
}

const mockCategoryStorage = {
  state: { value: [] as any[] },
  setValue: vi.fn().mockResolvedValue(undefined)
}

vi.mock('@/composables/useStorage', () => ({
  useExpenseStorage: () => mockExpenseStorage,
  useCategoryStorage: () => mockCategoryStorage
}))

// Mock validation functions
vi.mock('@/types/validation', () => ({
  validateExpenseInput: vi.fn().mockReturnValue({ isValid: true, errors: [] }),
  validateCategoryInput: vi.fn().mockReturnValue({ isValid: true, errors: [] })
}))

// Mock utils
vi.mock('@/types/utils', () => ({
  generateId: vi.fn().mockReturnValue('test-id-123')
}))

describe('useExpense', () => {
  let expenseComposable: ReturnType<typeof useExpense>

  beforeEach(async () => {
    vi.clearAllMocks()
    // Reset mock storage state
    mockExpenseStorage.state.value = []
    mockCategoryStorage.state.value = []
    // Reset validation mocks to default success
    const { validateExpenseInput, validateCategoryInput } = await import('@/types/validation')
    vi.mocked(validateExpenseInput).mockReturnValue({ isValid: true, errors: [] })
    vi.mocked(validateCategoryInput).mockReturnValue({ isValid: true, errors: [] })
    
    expenseComposable = useExpense()
  })

  describe('ÂàùÂßãÁä∂ÊÄÅ', () => {
    it('Â∫îËØ•ÊúâÊ≠£Á°ÆÁöÑÂàùÂßãÁä∂ÊÄÅ', () => {
      expect(expenseComposable.isLoading.value).toBe(false)
      expect(expenseComposable.error.value).toBe(null)
      expect(expenseComposable.expenses.value).toEqual([])
      expect(expenseComposable.categories.value).toEqual([])
      expect(expenseComposable.filteredExpenses.value).toEqual([])
      expect(expenseComposable.todayExpenses.value).toEqual([])
      expect(expenseComposable.todayTotal.value).toBe(0)
      expect(expenseComposable.thisMonthExpenses.value).toEqual([])
      expect(expenseComposable.thisMonthTotal.value).toBe(0)
    })

    it('Â∫îËØ•ÂàùÂßãÂåñÈªòËÆ§ÂàÜÁ±ª', () => {
      expect(expenseComposable.initializeDefaultCategories).toBeDefined()
    })
  })

  describe('Ê∂àË¥πËÆ∞ÂΩï CRUD Êìç‰Ωú', () => {
    describe('addExpense', () => {
      it('Â∫îËØ•ÊàêÂäüÊ∑ªÂä†Ê∂àË¥πËÆ∞ÂΩï', async () => {
        // Add a mock category first
        mockCategoryStorage.state.value.push({
          id: 'cat-1',
          name: 'È§êÈ•Æ',
          icon: 'üçΩÔ∏è',
          color: '#FF0000',
          isDefault: true
        })

        const expenseInput: ExpenseInput = {
          amount: 50.5,
          categoryId: 'cat-1',
          description: 'ÂçàÈ§ê',
          date: new Date('2024-01-15')
        }

        const result = await expenseComposable.addExpense(expenseInput)

        expect(result).toEqual({
          id: 'test-id-123',
          amount: 50.5,
          categoryId: 'cat-1',
          description: 'ÂçàÈ§ê',
          date: new Date('2024-01-15'),
          createdAt: expect.any(Date),
          updatedAt: expect.any(Date)
        })
      })

      it('Â∫îËØ•Âú®È™åËØÅÂ§±Ë¥•Êó∂ÊäõÂá∫ÈîôËØØ', async () => {
        const { validateExpenseInput } = await import('@/types/validation')
        vi.mocked(validateExpenseInput).mockReturnValue({
          isValid: false,
          errors: [{ field: 'amount', message: 'ÈáëÈ¢ùÊó†Êïà', code: 'INVALID' }]
        })

        const expenseInput: ExpenseInput = {
          amount: -10,
          categoryId: 'cat-1',
          description: 'ÊµãËØï',
        }

        await expect(expenseComposable.addExpense(expenseInput)).rejects.toThrow('ÈáëÈ¢ùÊó†Êïà')
      })

      it('Â∫îËØ•Âú®ÂàÜÁ±ª‰∏çÂ≠òÂú®Êó∂ÊäõÂá∫ÈîôËØØ', async () => {
        // Categories are empty by default in beforeEach
        const expenseInput: ExpenseInput = {
          amount: 50,
          categoryId: 'non-existent-cat',
          description: 'ÊµãËØï',
        }

        await expect(expenseComposable.addExpense(expenseInput)).rejects.toThrow('ÊåáÂÆöÁöÑÊ∂àË¥πÂàÜÁ±ª‰∏çÂ≠òÂú®')
      })

      it('Â∫îËØ•‰ΩøÁî®ÂΩìÂâçÊó•Êúü‰Ωú‰∏∫ÈªòËÆ§Êó•Êúü', async () => {
        // Add a mock category first
        mockCategoryStorage.state.value.push({
          id: 'cat-1',
          name: 'ÊµãËØïÂàÜÁ±ª',
          icon: 'üçΩÔ∏è',
          color: '#FF0000',
          isDefault: true
        })

        const expenseInput: ExpenseInput = {
          amount: 50,
          categoryId: 'cat-1',
          description: 'ÊµãËØï',
        }

        const result = await expenseComposable.addExpense(expenseInput)

        expect(result.date).toBeInstanceOf(Date)
        expect(Math.abs(result.date.getTime() - new Date().getTime())).toBeLessThan(1000)
      })
    })

    describe('updateExpense', () => {
      it('Â∫îËØ•ÊàêÂäüÊõ¥Êñ∞Ê∂àË¥πËÆ∞ÂΩï', async () => {
        // Mock existing expense and category
        const existingExpense = {
          id: 'expense-1',
          amount: 30,
          categoryId: 'cat-1',
          description: 'Êó©È§ê',
          date: new Date('2024-01-15'),
          createdAt: new Date('2024-01-15T08:00:00'),
          updatedAt: new Date('2024-01-15T08:00:00')
        }
        mockExpenseStorage.state.value.push(existingExpense)
        mockCategoryStorage.state.value.push({
          id: 'cat-1',
          name: 'È§êÈ•Æ',
          icon: 'üçΩÔ∏è',
          color: '#FF0000',
          isDefault: true
        })

        const updateData = {
          amount: 35,
          description: '‰∏∞ÁõõÊó©È§ê'
        }

        const result = await expenseComposable.updateExpense('expense-1', updateData)

        expect(result.amount).toBe(35)
        expect(result.description).toBe('‰∏∞ÁõõÊó©È§ê')
        expect(result.updatedAt).toBeInstanceOf(Date)
      })

      it('Â∫îËØ•Âú®ËÆ∞ÂΩï‰∏çÂ≠òÂú®Êó∂ÊäõÂá∫ÈîôËØØ', async () => {
        await expect(expenseComposable.updateExpense('non-existent', { amount: 50 }))
          .rejects.toThrow('Ê∂àË¥πËÆ∞ÂΩï‰∏çÂ≠òÂú®')
      })
    })

    describe('deleteExpense', () => {
      it('Â∫îËØ•ÊàêÂäüÂà†Èô§Ê∂àË¥πËÆ∞ÂΩï', async () => {
        // Mock existing expense
        const existingExpense = {
          id: 'expense-1',
          amount: 30,
          categoryId: 'cat-1',
          description: 'Êó©È§ê',
          date: new Date(),
          createdAt: new Date(),
          updatedAt: new Date()
        }
        mockExpenseStorage.state.value.push(existingExpense)

        await expect(expenseComposable.deleteExpense('expense-1')).resolves.not.toThrow()
      })

      it('Â∫îËØ•Âú®ËÆ∞ÂΩï‰∏çÂ≠òÂú®Êó∂ÊäõÂá∫ÈîôËØØ', async () => {
        await expect(expenseComposable.deleteExpense('non-existent'))
          .rejects.toThrow('Ê∂àË¥πËÆ∞ÂΩï‰∏çÂ≠òÂú®')
      })
    })

    describe('deleteExpenses', () => {
      it('Â∫îËØ•ÊàêÂäüÊâπÈáèÂà†Èô§Ê∂àË¥πËÆ∞ÂΩï', async () => {
        const ids = ['expense-1', 'expense-2']
        await expect(expenseComposable.deleteExpenses(ids)).resolves.not.toThrow()
      })
    })
  })

  describe('Ê∂àË¥πÂàÜÁ±ªÁÆ°ÁêÜ', () => {
    describe('addCategory', () => {
      it('Â∫îËØ•ÊàêÂäüÊ∑ªÂä†ÂàÜÁ±ª', async () => {
        const categoryInput: CategoryInput = {
          name: 'Êñ∞ÂàÜÁ±ª',
          icon: 'üéØ',
          color: '#FF5733'
        }

        const result = await expenseComposable.addCategory(categoryInput)

        expect(result).toEqual({
          id: 'test-id-123',
          name: 'Êñ∞ÂàÜÁ±ª',
          icon: 'üéØ',
          color: '#FF5733',
          isDefault: false
        })
      })

      it('Â∫îËØ•Âú®ÂàÜÁ±ªÂêçÁß∞ÈáçÂ§çÊó∂ÊäõÂá∫ÈîôËØØ', async () => {
        // Mock existing category
        const existingCategory = {
          id: 'cat-1',
          name: 'È§êÈ•Æ',
          icon: 'üçΩÔ∏è',
          color: '#FF0000',
          isDefault: true
        }
        mockCategoryStorage.state.value.push(existingCategory)

        const categoryInput: CategoryInput = {
          name: 'È§êÈ•Æ', // Same name
          icon: 'üéØ',
          color: '#FF5733'
        }

        await expect(expenseComposable.addCategory(categoryInput))
          .rejects.toThrow('ÂàÜÁ±ªÂêçÁß∞Â∑≤Â≠òÂú®')
      })
    })

    describe('updateCategory', () => {
      it('Â∫îËØ•ÊàêÂäüÊõ¥Êñ∞ÂàÜÁ±ª', async () => {
        // Mock existing category
        const existingCategory = {
          id: 'cat-1',
          name: 'È§êÈ•Æ',
          icon: 'üçΩÔ∏è',
          color: '#FF0000',
          isDefault: true
        }
        mockCategoryStorage.state.value.push(existingCategory)

        const updateData = {
          name: 'ÁæéÈ£ü',
          icon: 'üçï'
        }

        const result = await expenseComposable.updateCategory('cat-1', updateData)

        expect(result.name).toBe('ÁæéÈ£ü')
        expect(result.icon).toBe('üçï')
      })

      it('Â∫îËØ•Âú®ÂàÜÁ±ª‰∏çÂ≠òÂú®Êó∂ÊäõÂá∫ÈîôËØØ', async () => {
        await expect(expenseComposable.updateCategory('non-existent', { name: 'ÊµãËØï' }))
          .rejects.toThrow('ÂàÜÁ±ª‰∏çÂ≠òÂú®')
      })
    })

    describe('deleteCategory', () => {
      it('Â∫îËØ•ÊàêÂäüÂà†Èô§ÈùûÈªòËÆ§ÂàÜÁ±ª', async () => {
        // Mock existing category
        const existingCategory = {
          id: 'cat-1',
          name: 'Ëá™ÂÆö‰πâÂàÜÁ±ª',
          icon: 'üéØ',
          color: '#FF0000',
          isDefault: false
        }
        mockCategoryStorage.state.value.push(existingCategory)

        await expect(expenseComposable.deleteCategory('cat-1')).resolves.not.toThrow()
      })

      it('Â∫îËØ•Âú®Âà†Èô§ÈªòËÆ§ÂàÜÁ±ªÊó∂ÊäõÂá∫ÈîôËØØ', async () => {
        // Mock existing default category
        const existingCategory = {
          id: 'cat-1',
          name: 'È§êÈ•Æ',
          icon: 'üçΩÔ∏è',
          color: '#FF0000',
          isDefault: true
        }
        mockCategoryStorage.state.value.push(existingCategory)

        await expect(expenseComposable.deleteCategory('cat-1'))
          .rejects.toThrow('‰∏çËÉΩÂà†Èô§ÈªòËÆ§ÂàÜÁ±ª')
      })

      it('Â∫îËØ•Âú®ÂàÜÁ±ªÊúâÂÖ≥ËÅîÊ∂àË¥πËÆ∞ÂΩïÊó∂ÊäõÂá∫ÈîôËØØ', async () => {
        // Mock existing category and expense
        const existingCategory = {
          id: 'cat-1',
          name: 'Ëá™ÂÆö‰πâÂàÜÁ±ª',
          icon: 'üéØ',
          color: '#FF0000',
          isDefault: false
        }
        const existingExpense = {
          id: 'expense-1',
          amount: 30,
          categoryId: 'cat-1',
          description: 'ÊµãËØï',
          date: new Date(),
          createdAt: new Date(),
          updatedAt: new Date()
        }
        mockCategoryStorage.state.value.push(existingCategory)
        mockExpenseStorage.state.value.push(existingExpense)

        await expect(expenseComposable.deleteCategory('cat-1'))
          .rejects.toThrow('ËØ•ÂàÜÁ±ª‰∏ãËøòÊúâÊ∂àË¥πËÆ∞ÂΩïÔºåÊó†Ê≥ïÂà†Èô§')
      })
    })
  })

  describe('Êü•ËØ¢ÂíåÁ≠õÈÄâÂäüËÉΩ', () => {
    beforeEach(() => {
      // Mock some test data
      const testExpenses = [
        {
          id: 'exp-1',
          amount: 30,
          categoryId: 'cat-1',
          description: 'Êó©È§ê',
          date: new Date('2024-01-15T08:00:00'),
          createdAt: new Date('2024-01-15T08:00:00'),
          updatedAt: new Date('2024-01-15T08:00:00')
        },
        {
          id: 'exp-2',
          amount: 50,
          categoryId: 'cat-2',
          description: 'ÂçàÈ§ê',
          date: new Date('2024-01-15T12:00:00'),
          createdAt: new Date('2024-01-15T12:00:00'),
          updatedAt: new Date('2024-01-15T12:00:00')
        },
        {
          id: 'exp-3',
          amount: 100,
          categoryId: 'cat-1',
          description: 'ÊôöÈ§ê',
          date: new Date('2024-01-16T19:00:00'),
          createdAt: new Date('2024-01-16T19:00:00'),
          updatedAt: new Date('2024-01-16T19:00:00')
        }
      ]
      mockExpenseStorage.state.value.push(...testExpenses)
    })

    describe('getExpensesByDate', () => {
      it('Â∫îËØ•ËøîÂõûÊåáÂÆöÊó•ÊúüÁöÑÊ∂àË¥πËÆ∞ÂΩï', () => {
        const result = expenseComposable.getExpensesByDate(new Date('2024-01-15'))
        expect(result).toHaveLength(2)
        expect(result.map(e => e.id)).toEqual(['exp-1', 'exp-2'])
      })

      it('Â∫îËØ•Âú®Ê≤°ÊúâËÆ∞ÂΩïÊó∂ËøîÂõûÁ©∫Êï∞ÁªÑ', () => {
        const result = expenseComposable.getExpensesByDate(new Date('2024-01-20'))
        expect(result).toHaveLength(0)
      })
    })

    describe('getExpensesByDateRange', () => {
      it('Â∫îËØ•ËøîÂõûÊó•ÊúüËåÉÂõ¥ÂÜÖÁöÑÊ∂àË¥πËÆ∞ÂΩï', () => {
        const startDate = new Date('2024-01-15')
        const endDate = new Date('2024-01-16T23:59:59') // Include the entire end date
        const result = expenseComposable.getExpensesByDateRange(startDate, endDate)
        expect(result).toHaveLength(3)
      })
    })

    describe('getExpensesByCategory', () => {
      it('Â∫îËØ•ËøîÂõûÊåáÂÆöÂàÜÁ±ªÁöÑÊ∂àË¥πËÆ∞ÂΩï', () => {
        const result = expenseComposable.getExpensesByCategory('cat-1')
        expect(result).toHaveLength(2)
        expect(result.map(e => e.id)).toEqual(['exp-1', 'exp-3'])
      })
    })

    describe('getExpensesByAmountRange', () => {
      it('Â∫îËØ•ËøîÂõûÈáëÈ¢ùËåÉÂõ¥ÂÜÖÁöÑÊ∂àË¥πËÆ∞ÂΩï', () => {
        const result = expenseComposable.getExpensesByAmountRange(40, 100)
        expect(result).toHaveLength(2)
        expect(result.map(e => e.id)).toEqual(['exp-2', 'exp-3'])
      })
    })

    describe('searchExpenses', () => {
      it('Â∫îËØ•Ê†πÊçÆÊèèËø∞ÊêúÁ¥¢Ê∂àË¥πËÆ∞ÂΩï', () => {
        const result = expenseComposable.searchExpenses('È§ê')
        expect(result).toHaveLength(3) // Êó©È§ê„ÄÅÂçàÈ§ê„ÄÅÊôöÈ§ê
      })

      it('Â∫îËØ•ËøõË°å‰∏çÂå∫ÂàÜÂ§ßÂ∞èÂÜôÁöÑÊêúÁ¥¢', () => {
        const result = expenseComposable.searchExpenses('Êó©')
        expect(result).toHaveLength(1)
        expect(result[0].id).toBe('exp-1')
      })
    })

    describe('Á≠õÈÄâÂäüËÉΩ', () => {
      it('Â∫îËØ•ËÆæÁΩÆÁ≠õÈÄâÊù°‰ª∂', () => {
        const filter: ExpenseFilter = {
          categoryId: 'cat-1',
          minAmount: 50
        }
        
        expenseComposable.setFilter(filter)
        expect(expenseComposable.currentFilter.value).toEqual(filter)
      })

      it('Â∫îËØ•Ê∏ÖÈô§Á≠õÈÄâÊù°‰ª∂', () => {
        expenseComposable.setFilter({ categoryId: 'cat-1' })
        expenseComposable.clearFilter()
        expect(expenseComposable.currentFilter.value).toEqual({})
      })

      it('Â∫îËØ•Â∫îÁî®Â§çÂêàÁ≠õÈÄâÊù°‰ª∂', () => {
        const filter: ExpenseFilter = {
          categoryId: 'cat-1',
          minAmount: 50
        }
        
        const result = expenseComposable.applyFilter(filter)
        expect(result).toHaveLength(1)
        expect(result[0].id).toBe('exp-3')
      })
    })
  })

  describe('ÁªüËÆ°ÂàÜÊûêÂäüËÉΩ', () => {
    beforeEach(() => {
      // Mock test data and categories
      const testExpenses = [
        {
          id: 'exp-1',
          amount: 30,
          categoryId: 'cat-1',
          description: 'Êó©È§ê',
          date: new Date('2024-01-15'),
          createdAt: new Date(),
          updatedAt: new Date()
        },
        {
          id: 'exp-2',
          amount: 50,
          categoryId: 'cat-2',
          description: 'ÂçàÈ§ê',
          date: new Date('2024-01-15'),
          createdAt: new Date(),
          updatedAt: new Date()
        },
        {
          id: 'exp-3',
          amount: 100,
          categoryId: 'cat-1',
          description: 'ÊôöÈ§ê',
          date: new Date('2024-01-16'),
          createdAt: new Date(),
          updatedAt: new Date()
        }
      ]
      
      const testCategories = [
        { id: 'cat-1', name: 'È§êÈ•Æ', icon: 'üçΩÔ∏è', color: '#FF0000', isDefault: true },
        { id: 'cat-2', name: '‰∫§ÈÄö', icon: 'üöó', color: '#00FF00', isDefault: true }
      ]

      mockExpenseStorage.state.value.push(...testExpenses)
      mockCategoryStorage.state.value.push(...testCategories)
    })

    describe('getExpenseStatistics', () => {
      it('Â∫îËØ•ËøîÂõûÊ≠£Á°ÆÁöÑÁªüËÆ°Êï∞ÊçÆ', () => {
        const startDate = new Date('2024-01-15')
        const endDate = new Date('2024-01-16')
        
        const stats = expenseComposable.getExpenseStatistics(startDate, endDate)
        
        expect(stats.totalAmount).toBe(180)
        expect(stats.totalCount).toBe(3)
        expect(stats.averageAmount).toBe(60)
        expect(stats.categoryStats).toHaveLength(2)
        expect(stats.dailyStats).toHaveLength(2)
        
        // Check category stats
        const cat1Stats = stats.categoryStats.find(s => s.categoryId === 'cat-1')
        expect(cat1Stats?.amount).toBe(130)
        expect(cat1Stats?.count).toBe(2)
        expect(cat1Stats?.percentage).toBeCloseTo(72.22, 2)
      })

      it('Â∫îËØ•Â§ÑÁêÜÁ©∫Êï∞ÊçÆ', () => {
        mockExpenseStorage.state.value.length = 0
        
        const startDate = new Date('2024-01-15')
        const endDate = new Date('2024-01-16')
        
        const stats = expenseComposable.getExpenseStatistics(startDate, endDate)
        
        expect(stats.totalAmount).toBe(0)
        expect(stats.totalCount).toBe(0)
        expect(stats.averageAmount).toBe(0)
        expect(stats.categoryStats).toHaveLength(0)
        expect(stats.dailyStats).toHaveLength(0)
      })
    })
  })

  describe('Â∑•ÂÖ∑ÊñπÊ≥ï', () => {
    beforeEach(() => {
      const testCategories = [
        { id: 'cat-1', name: 'È§êÈ•Æ', icon: 'üçΩÔ∏è', color: '#FF0000', isDefault: true }
      ]
      const testExpenses = [
        {
          id: 'exp-1',
          amount: 30,
          categoryId: 'cat-1',
          description: 'Êó©È§ê',
          date: new Date(),
          createdAt: new Date(),
          updatedAt: new Date()
        }
      ]

      mockCategoryStorage.state.value.push(...testCategories)
      mockExpenseStorage.state.value.push(...testExpenses)
    })

    describe('getCategoryById', () => {
      it('Â∫îËØ•ËøîÂõûÊ≠£Á°ÆÁöÑÂàÜÁ±ª', () => {
        const category = expenseComposable.getCategoryById('cat-1')
        expect(category?.name).toBe('È§êÈ•Æ')
      })

      it('Â∫îËØ•Âú®ÂàÜÁ±ª‰∏çÂ≠òÂú®Êó∂ËøîÂõû undefined', () => {
        const category = expenseComposable.getCategoryById('non-existent')
        expect(category).toBeUndefined()
      })
    })

    describe('getExpenseById', () => {
      it('Â∫îËØ•ËøîÂõûÊ≠£Á°ÆÁöÑÊ∂àË¥πËÆ∞ÂΩï', () => {
        const expense = expenseComposable.getExpenseById('exp-1')
        expect(expense?.description).toBe('Êó©È§ê')
      })

      it('Â∫îËØ•Âú®ËÆ∞ÂΩï‰∏çÂ≠òÂú®Êó∂ËøîÂõû undefined', () => {
        const expense = expenseComposable.getExpenseById('non-existent')
        expect(expense).toBeUndefined()
      })
    })

    describe('clearError', () => {
      it('Â∫îËØ•Ê∏ÖÈô§ÈîôËØØÁä∂ÊÄÅ', () => {
        // Manually set error since it's readonly
        expenseComposable.clearError()
        expect(expenseComposable.error.value).toBe(null)
      })
    })
  })

  describe('ËÆ°ÁÆóÂ±ûÊÄß', () => {
    beforeEach(() => {
      const today = new Date()
      const thisMonth = new Date(today.getFullYear(), today.getMonth(), 15)
      const lastMonth = new Date(today.getFullYear(), today.getMonth() - 1, 15)

      const testExpenses = [
        {
          id: 'exp-today-1',
          amount: 30,
          categoryId: 'cat-1',
          description: '‰ªäÊó•Êó©È§ê',
          date: today,
          createdAt: new Date('2024-01-01T08:00:00'),
          updatedAt: new Date()
        },
        {
          id: 'exp-today-2',
          amount: 50,
          categoryId: 'cat-1',
          description: '‰ªäÊó•ÂçàÈ§ê',
          date: today,
          createdAt: new Date('2024-01-01T12:00:00'),
          updatedAt: new Date()
        },
        {
          id: 'exp-month',
          amount: 100,
          categoryId: 'cat-2',
          description: 'Êú¨ÊúàÂÖ∂‰ªñ',
          date: thisMonth,
          createdAt: new Date('2024-01-02T10:00:00'),
          updatedAt: new Date()
        },
        {
          id: 'exp-last-month',
          amount: 200,
          categoryId: 'cat-1',
          description: '‰∏äÊúàÊ∂àË¥π',
          date: lastMonth,
          createdAt: new Date('2024-01-03T14:00:00'), // Most recent createdAt
          updatedAt: new Date()
        }
      ]

      const testCategories = [
        { id: 'cat-1', name: 'È§êÈ•Æ', icon: 'üçΩÔ∏è', color: '#FF0000', isDefault: true },
        { id: 'cat-2', name: '‰∫§ÈÄö', icon: 'üöó', color: '#00FF00', isDefault: true }
      ]

      mockExpenseStorage.state.value.push(...testExpenses)
      mockCategoryStorage.state.value.push(...testCategories)
    })

    it('todayExpenses Â∫îËØ•ËøîÂõû‰ªäÊó•Ê∂àË¥πËÆ∞ÂΩï', () => {
      expect(expenseComposable.todayExpenses.value).toHaveLength(2)
      expect(expenseComposable.todayExpenses.value.map(e => e.id)).toEqual(['exp-today-1', 'exp-today-2'])
    })

    it('todayTotal Â∫îËØ•ËøîÂõû‰ªäÊó•Ê∂àË¥πÊÄªÈ¢ù', () => {
      expect(expenseComposable.todayTotal.value).toBe(80)
    })

    it('thisMonthExpenses Â∫îËØ•ËøîÂõûÊú¨ÊúàÊ∂àË¥πËÆ∞ÂΩï', () => {
      // Should include today's expenses and this month's expense
      expect(expenseComposable.thisMonthExpenses.value).toHaveLength(3)
    })

    it('thisMonthTotal Â∫îËØ•ËøîÂõûÊú¨ÊúàÊ∂àË¥πÊÄªÈ¢ù', () => {
      expect(expenseComposable.thisMonthTotal.value).toBe(180)
    })

    it('expensesByCategory Â∫îËØ•ÊåâÂàÜÁ±ªÁªüËÆ°Ê∂àË¥π', () => {
      const categoryStats = expenseComposable.expensesByCategory.value
      expect(categoryStats).toHaveLength(2)
      
      const cat1Stats = categoryStats.find(s => s.categoryId === 'cat-1')
      expect(cat1Stats?.amount).toBe(280) // 30 + 50 + 200
      expect(cat1Stats?.count).toBe(3)
    })

    it('recentExpenses Â∫îËØ•ËøîÂõûÊúÄËøëÁöÑÊ∂àË¥πËÆ∞ÂΩï', () => {
      const recent = expenseComposable.recentExpenses.value
      expect(recent).toHaveLength(4) // All test expenses
      // Should be sorted by createdAt desc
      expect(recent[0].id).toBe('exp-last-month') // Most recently created
    })
  })
})